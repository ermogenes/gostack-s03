{"version":3,"sources":["assets/logo.svg","assets/github-background.svg","styles/global.ts","services/api.ts","pages/Dashboard/styles.ts","pages/Dashboard/index.tsx","pages/Repository/styles.ts","pages/Repository/index.tsx","routes/index.tsx","App.tsx","index.tsx"],"names":["module","exports","createGlobalStyle","githubBackground","api","axios","create","baseURL","Title","styled","h1","Form","form","props","hasError","css","shade","Error","span","Repositories","div","Dashboard","useState","repositoryQuery","setRepositoryQuery","inputError","setInputError","storedRepos","localStorage","getItem","JSON","parse","repositories","setRepositories","event","a","preventDefault","get","response","repositoryFound","data","useEffect","setItem","stringify","src","logoImg","alt","onSubmit","value","onChange","e","target","placeholder","type","map","repository","key","full_name","to","owner","avatar_url","login","description","size","Header","header","RepositoryInfo","section","OpenIssues","Repository","setRepository","openIssues","setOpenIssues","params","useRouteMatch","then","stargazers_count","forks_count","open_issues_count","issue","id","href","html_url","title","user","Routes","path","component","exact","App","basename","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7704d64d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.04f6798f.svg\";","module.exports = __webpack_public_path__ + \"static/media/github-background.0b819d63.svg\";","import { createGlobalStyle } from 'styled-components';\n\nimport githubBackground from '../assets/github-background.svg';\n\nexport default createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    outline: 0;\n    box-sizing: border-box;\n  }\n\n  body {\n    background-color: #f0f0f5;\n    background-image: url(${githubBackground});\n    background-repeat: no-repeat;\n    background-position-y: top;\n    background-position-x: 70%;\n    -webkit-font-smoothing: antialiased;\n  }\n\n  body, input, button {\n    font: 16px Roboto, sans-serif;\n  }\n\n  #root {\n    max-width: 960px;\n    margin: 0 auto;\n    padding: 40px 20px;\n  }\n\n  button {\n    cursor: pointer;\n  }\n`;\n","import axios from 'axios';\n\nconst api = axios.create({\n  baseURL: 'https://api.github.com',\n});\n\nexport default api;\n","import styled, { css } from 'styled-components';\nimport { shade } from 'polished';\n\ninterface FormProps {\n  hasError: boolean;\n}\n\nexport const Title = styled.h1`\n  font-size: 48px;\n  color: #3a3a3a;\n  margin-top: 80px;\n  max-width: 450px;\n  line-height: 56px;\n`;\n\nexport const Form = styled.form<FormProps>`\n  margin-top: 40px;\n  max-width: 700px;\n  display: flex;\n\n  input {\n    flex: 1;\n    height: 70px;\n    padding: 0 24px;\n    border: 0;\n    border-radius: 5px 0px 0px 5px;\n    color: #3a3a3a;\n    border: 2px solid #fff;\n    border-right: 0;\n\n    ${props =>\n      props.hasError &&\n      css`\n        border-color: #c53030;\n      `}\n  }\n\n  button {\n    width: 210px;\n    height: 70px;\n    background-color: #04d361;\n    border-radius: 0px 5px 5px 0px;\n    border: 0;\n    color: #fff;\n    font-weight: bold;\n    transition: background-color 0.2s;\n\n    &:hover {\n      background-color: ${shade(0.2, '#04d361')};\n    }\n\n    &::placeholder {\n      color: #a8a8b3;\n    }\n  }\n`;\n\nexport const Error = styled.span`\n  display: block;\n  color: #c53030;\n  margin-top: 8px;\n`;\n\nexport const Repositories = styled.div`\n  margin-top: 80px;\n  max-width: 700px;\n\n  a {\n    background-color: #fff;\n    border-radius: 5px;\n    width: 100%;\n    padding: 24px;\n    text-decoration: none;\n    display: flex;\n    align-items: center;\n\n    &:hover {\n      transform: translateX(10px);\n      transition: transform 0.2s;\n    }\n\n    & + a {\n      margin-top: 16px;\n    }\n\n    img {\n      width: 64px;\n      height: 64px;\n      border-radius: 50%;\n    }\n\n    div {\n      margin-left: 0 16px;\n      flex: 1;\n\n      strong {\n        font-size: 20px;\n        color: #3d3d4d;\n      }\n\n      p {\n        font-size: 18px;\n        color: #a8a8b3;\n        margin-top: 4px;\n      }\n    }\n\n    svg {\n      margin-left: auto;\n      color: #cbcbd6;\n    }\n  }\n`;\n","import React, { useState, useEffect, FormEvent } from 'react';\nimport { Link } from 'react-router-dom';\nimport { FiChevronRight } from 'react-icons/fi';\n\nimport api from '../../services/api';\n\nimport logoImg from '../../assets/logo.svg';\n\nimport { Title, Form, Repositories, Error } from './styles';\n\ninterface Repository {\n  // eslint-disable-next-line camelcase\n  full_name: string;\n  description: string;\n  owner: {\n    login: string;\n    // eslint-disable-next-line camelcase\n    avatar_url: string;\n  };\n}\n\nconst Dashboard: React.FC = () => {\n  const [repositoryQuery, setRepositoryQuery] = useState('');\n  const [inputError, setInputError] = useState('');\n  const [repositories, setRepositories] = useState<Repository[]>(() => {\n    const storedRepos = localStorage.getItem('@GitHubExplorer:repositories');\n    return storedRepos ? JSON.parse(storedRepos) : [];\n  });\n\n  useEffect(() => {\n    localStorage.setItem(\n      '@GitHubExplorer:repositories',\n      JSON.stringify(repositories),\n    );\n  }, [repositories]);\n\n  async function handleRepositoryQuerySearch(\n    event: FormEvent<HTMLFormElement>,\n  ): Promise<void> {\n    event.preventDefault();\n\n    if (!repositoryQuery) {\n      setInputError('Enter a valid \"author/repository\"');\n      return;\n    }\n\n    try {\n      const response = await api.get<Repository>(`/repos/${repositoryQuery}`);\n\n      const repositoryFound = response.data;\n      setRepositories([...repositories, repositoryFound]);\n\n      setRepositoryQuery('');\n      setInputError('');\n    } catch (Err) {\n      setInputError('Not found, or communication error.');\n    }\n  }\n\n  return (\n    <>\n      <img src={logoImg} alt=\"GitHub Explorer Logo\" />\n      <Title>GitHub Repository Explorer</Title>\n      <Form hasError={!!inputError} onSubmit={handleRepositoryQuerySearch}>\n        <input\n          value={repositoryQuery}\n          onChange={e => setRepositoryQuery(e.target.value)}\n          placeholder=\"Enter repo name\"\n        />\n        <button type=\"submit\">Search</button>\n      </Form>\n\n      {inputError && <Error>{inputError}</Error>}\n\n      <Repositories>\n        {repositories.map(repository => (\n          <Link\n            key={repository.full_name}\n            to={`/repository/${repository.full_name}`}\n          >\n            <img\n              src={repository.owner.avatar_url}\n              alt={repository.owner.login}\n            />\n            <div>\n              <strong>{repository.full_name}</strong>\n              <p>{repository.description}</p>\n            </div>\n            <FiChevronRight size={20} />\n          </Link>\n        ))}\n      </Repositories>\n    </>\n  );\n};\n\nexport default Dashboard;\n","import styled from 'styled-components';\n\nexport const Header = styled.header`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n\n  a {\n    display: flex;\n    align-items: center;\n    text-decoration: none;\n    color: #a8a8b3;\n    transition: color 0.2s;\n\n    &:hover {\n      color: #666;\n    }\n\n    svg {\n      margin-right: 4px;\n    }\n  }\n`;\n\nexport const RepositoryInfo = styled.section`\n  margin-top: 80px;\n\n  header {\n    display: flex;\n    align-items: center;\n\n    img {\n      width: 120px;\n      height: 120px;\n      border-radius: 50%;\n    }\n\n    div {\n      margin-left: 25px;\n\n      strong {\n        font-size: 36px;\n        color: #3d3d4d;\n      }\n\n      p {\n        font-size: 18px;\n        color: #737380;\n        margin-top: 4px;\n      }\n    }\n  }\n\n  ul {\n    display: flex;\n    list-style: none;\n    margin-top: 40px;\n\n    li {\n      & + li {\n        margin-left: 80px;\n      }\n\n      strong {\n        display: block;\n        font-size: 36px;\n        color: #3d3d4d;\n      }\n\n      span {\n        display: block;\n        margin-top: 4px;\n        color: #6c6c80;\n\n        svg {\n          margin-right: 4px;\n        }\n      }\n    }\n  }\n`;\n\nexport const OpenIssues = styled.div`\n  margin-top: 80px;\n\n  a {\n    background-color: #fff;\n    border-radius: 5px;\n    width: 100%;\n    padding: 24px;\n    text-decoration: none;\n    display: flex;\n    align-items: center;\n\n    &:hover {\n      transform: translateX(10px);\n      transition: transform 0.2s;\n    }\n\n    & + a {\n      margin-top: 16px;\n    }\n\n    div {\n      margin-left: 0 16px;\n      flex: 1;\n\n      strong {\n        font-size: 20px;\n        color: #3d3d4d;\n      }\n\n      p {\n        font-size: 18px;\n        color: #a8a8b3;\n        margin-top: 4px;\n      }\n    }\n\n    svg {\n      margin-left: auto;\n      color: #cbcbd6;\n    }\n  }\n`;\n","/* eslint-disable camelcase */\nimport React, { useEffect, useState } from 'react';\nimport { useRouteMatch, Link } from 'react-router-dom';\nimport {\n  FiGitBranch,\n  FiGitPullRequest,\n  FiStar,\n  FiChevronLeft,\n  FiChevronRight,\n} from 'react-icons/fi';\nimport api from '../../services/api';\n\nimport { Header, RepositoryInfo, OpenIssues } from './styles';\n\nimport logoImg from '../../assets/logo.svg';\n\ninterface Repository {\n  full_name: string;\n  description: string;\n  stargazers_count: number;\n  forks_count: number;\n  open_issues_count: number;\n  owner: {\n    login: string;\n    avatar_url: string;\n  };\n}\n\ninterface OpenIssue {\n  id: number;\n  title: string;\n  html_url: string;\n  user: {\n    login: string;\n  };\n}\ninterface RepositoryParams {\n  repository: string;\n}\n\nconst Repository: React.FC = () => {\n  const [repository, setRepository] = useState<Repository | null>(null);\n  const [openIssues, setOpenIssues] = useState<OpenIssue[]>([]);\n\n  const { params } = useRouteMatch<RepositoryParams>();\n\n  useEffect(() => {\n    api.get(`repos/${params.repository}`).then(response => {\n      setRepository(response.data);\n    });\n\n    api.get(`repos/${params.repository}/issues`).then(response => {\n      setOpenIssues(response.data);\n    });\n  }, [params.repository]);\n\n  return (\n    <>\n      <Header>\n        <img src={logoImg} alt=\"GitHub Explorer Logo\" />\n        <Link to=\"/\">\n          <FiChevronLeft /> Voltar\n        </Link>\n      </Header>\n\n      {repository ? (\n        <RepositoryInfo>\n          <header>\n            <img\n              src={repository.owner.avatar_url}\n              alt={repository.owner.login}\n            />\n            <div>\n              <strong>{repository.full_name}</strong>\n              <p>{repository.description}</p>\n            </div>\n          </header>\n          <ul>\n            <li>\n              <strong>{repository.stargazers_count}</strong>\n              <span>\n                <FiStar />\n                Stars\n              </span>\n            </li>\n            <li>\n              <strong>{repository.forks_count}</strong>\n              <span>\n                <FiGitBranch /> Forks\n              </span>\n            </li>\n            <li>\n              <strong>{repository.open_issues_count}</strong>\n              <span>\n                <FiGitPullRequest /> Open issues\n              </span>\n            </li>\n          </ul>\n        </RepositoryInfo>\n      ) : (\n        <p>Loading...</p>\n      )}\n\n      <OpenIssues>\n        {openIssues.map(issue => (\n          <a key={issue.id} href={issue.html_url}>\n            <div>\n              <strong>{issue.title}</strong>\n              <p>{issue.user.login}</p>\n            </div>\n            <FiChevronRight size={20} />\n          </a>\n        ))}\n      </OpenIssues>\n    </>\n  );\n};\n\nexport default Repository;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport Dashboard from '../pages/Dashboard';\nimport Repository from '../pages/Repository';\n\nconst Routes: React.FC = () => (\n  <Switch>\n    <Route path=\"/repository/:repository+\" component={Repository} />\n    <Route exact path=\"/\" component={Dashboard} />\n  </Switch>\n);\n\nexport default Routes;\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport GlobaStyle from './styles/global';\nimport Routes from './routes';\n\nconst App: React.FC = () => (\n  <>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Routes />\n    </BrowserRouter>\n    <GlobaStyle />\n  </>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}